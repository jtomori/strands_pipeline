<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="som_forest_tools" label="SOM Forest Tools">
    <memberTool name="som_scattertool_terrainsculpt"/>
    <memberTool name="hide_terrain"/>
    <memberTool name="show_terrain"/>
    <memberTool name="extract_instances"/>
    <memberTool name="extract_each_instance"/>
    <memberTool name="delete_instances"/>
  </toolshelf>

  <tool name="som_scattertool_terrainsculpt" label="Terrain Sculpt" icon="SHELF_terrain_fx">
    <script scriptType="python"><![CDATA[# imports

import toolutils
viewer = toolutils.sceneViewer()

 
terrain_node = hou.node('/obj/terrain_create')


terrain_sculpt_node = hou.node(terrain_node.path()+'/CTRL_heightfield_paint_sculpt')
terrain_sculpt_node.setSelected(1, 1)

# set viewer to current tool
viewer.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="hide_terrain" label="Hide Terrain" icon="SHELF_terrain_fx">
    <script scriptType="python"><![CDATA[# hide terrain
terrain_node = hou.node('/obj/terrain_create')
terrain_node.setDisplayFlag(0)]]></script>
  </tool>

  <tool name="show_terrain" label="Show Terrain" icon="SHELF_terrain_fx">
    <script scriptType="python"><![CDATA[# show terrain
terrain_node = hou.node('/obj/terrain_create')
terrain_node.setDisplayFlag(1)]]></script>
  </tool>

  <tool name="extract_instances" label="Extract Instances" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[
# imports
import toolutils
viewer = toolutils.sceneViewer()

# set current node
curr_node = hou.selectedNodes()[-1]
curr_node_pos = curr_node.position()

parent_path = curr_node.path()
root_path = curr_node.parent().path()
        
# select display node        
display_node = hou.node(root_path + "/instance_display_all")
display_node.setSelected(1, 1)
display_node.setDisplayFlag(1)
display_node.setRenderFlag(1)


# set selection
selection = viewer.selectGeometry("Select Instance PackPrims To Extract", geometry_types = [hou.geometryType.Primitives]) 
node = selection.nodes()[-1]



# set blast (extract) nodes         
blast_node = hou.node(root_path).createNode("blast", "extract_instances")
blast_node.setPosition(curr_node_pos)
blast_node.move((0, -2))

blast_group_parm = blast_node.parm("group")
blast_grouptype_parm = blast_node.parm("grouptype")
blast_negate_parm = blast_node.parm("negate")




# loop over points
        
prims = selection.selectionStrings(False)[-1]
#print prims
geo = node.geometry()
        
# init blast_current_str
blast_current_str = ""
        
for pt in geo.globPoints(prims):

    id = pt.attribValue("id")
    id_str = str(id)
                
    #print "Selected ID: " + id_str        
    blast_current_str += "@id==" + id_str + " "
            
        
# set blast parms
blast_group_parm.set(blast_current_str)
blast_grouptype_parm.set(3)
blast_negate_parm.set(1)

# set input
blast_node.setInput(0, curr_node)


# create unpack node

unpack_node = hou.node(root_path).createNode("som_scattertool_unpack")
unpack_node.setPosition(curr_node_pos)
unpack_node.move((0, -3))

unpack_node.setInput(0, blast_node)

unpack_node.setSelected(1, 1)
unpack_node.setDisplayFlag(1)
unpack_node.setRenderFlag(1)

]]></script>
  </tool>

  <tool name="extract_each_instance" label="Extract Each Instance" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[
# imports
import toolutils
viewer = toolutils.sceneViewer()

# set current node
curr_node = hou.selectedNodes()[-1]
curr_node_pos = curr_node.position()

parent_path = curr_node.path()
root_path = curr_node.parent().path()
        
# select display node        
display_node = hou.node(root_path + "/instance_display_all")
display_node.setSelected(1, 1)
display_node.setDisplayFlag(1)
display_node.setRenderFlag(1)


# set selection
selection = viewer.selectGeometry("Select Instance PackPrims To Extract", geometry_types = [hou.geometryType.Primitives]) 
node = selection.nodes()[-1]


# loop over points
        
prims = selection.selectionStrings(False)[-1]
#print prims
geo = node.geometry()
        
# init blast_current_str
blast_current_str = ""

#number_of_ids = len(geo.globPoints(prims))
#print number_of_ids

i = 1

for pt in geo.globPoints(prims):


    id = pt.attribValue("id")
    id_str = str(id)
    
    ###############
    
    # set blast (extract) nodes         
    blast_node = hou.node(root_path).createNode("blast", "extract_instance_id_" + id_str)
    blast_node.setPosition(curr_node_pos)
    blast_node.move(((i-1)*3.5, -2))
    
    blast_group_parm = blast_node.parm("group")
    blast_grouptype_parm = blast_node.parm("grouptype")
    blast_negate_parm = blast_node.parm("negate")
    
         
    # set blast parms
    blast_group_parm.set("@id==" + id_str)
    blast_grouptype_parm.set(3)
    blast_negate_parm.set(1)

    # set input
    blast_node.setInput(0, curr_node)


    # create unpack node    
    unpack_node = hou.node(root_path).createNode("som_scattertool_unpack", "som_scattertool_unpack_id_" + id_str)
    unpack_node.setPosition(curr_node_pos)
    unpack_node.move(((i-1)*3.5, -3.5))
    
    unpack_node.setInput(0, blast_node)
    
    i = i+1
    



# set display
unpack_node.setSelected(1, 1)
unpack_node.setDisplayFlag(1)
unpack_node.setRenderFlag(1)
]]></script>
  </tool>

  <tool name="delete_instances" label="Delete Instances" icon="SOP_delete">
    <script scriptType="python"><![CDATA[
# imports
import toolutils
viewer = toolutils.sceneViewer()

# set current node
curr_node = hou.selectedNodes()[-1]
curr_node_conn = curr_node.outputConnections()[-1].outputItem()


curr_node_pos = curr_node.position()

parent_path = curr_node.path()
root_path = curr_node.parent().path()
        
# select display node        
display_node = hou.node(root_path + "/instance_display_all")
display_node.setSelected(1, 1)
display_node.setDisplayFlag(1)
display_node.setRenderFlag(1)


# set selection
selection = viewer.selectGeometry("Select Instance PackPrims To Delete", geometry_types = [hou.geometryType.Primitives]) 
node = selection.nodes()[-1]



# set blast (extract) nodes         
blast_node = hou.node(root_path).createNode("blast", "extract_instances")
blast_node.setPosition(curr_node_pos)
blast_node.move((0, -1))

blast_group_parm = blast_node.parm("group")
blast_grouptype_parm = blast_node.parm("grouptype")
blast_negate_parm = blast_node.parm("negate")




# loop over points
        
prims = selection.selectionStrings(False)[-1]
#print prims
geo = node.geometry()
        
# init blast_current_str
blast_current_str = ""
        
for pt in geo.globPoints(prims):

    id = pt.attribValue("id")
    id_str = str(id)
                
    #print "Selected ID: " + id_str        
    blast_current_str += "@id==" + id_str + " "
            
        
# set blast parms
blast_group_parm.set(blast_current_str)
blast_grouptype_parm.set(3)
blast_negate_parm.set(0)

# set input
blast_node.setInput(0, curr_node)

curr_node_conn.setInput(0, blast_node)
]]></script>
  </tool>

  <tool name="disable_iridiscence" label="Disable Iridiscence" icon="VOP_carpaintshadercore">
    <helpText><![CDATA[Disable Iridiscene for "morning" take in all MegaLoad and Speedtree Shaders.]]></helpText>
    <script scriptType="python"><![CDATA[## take handling

morning_t = hou.takes.findTake("morning")
main_t = hou.takes.findTake("Main")
hou.takes.setCurrentTake(morning_t)


## go through shaders

som_shader_count = 0

for node in hou.node("obj/").allSubChildren():
    if node.type().name() == "som_rs_mega_shd" or node.type().name() == "som_rs_speedtree_bark_shd" or node.type().name() == "som_rs_speedtree_leaf_shd":
        #print node.name()
        
        use_irid_coat = node.parmTuple("use_irid_coat")
        morning_t.addParmTuple(use_irid_coat)
        use_irid_coat.set((0,))
        
        use_irid_mat_layer = node.parmTuple("use_irid_mat_layer")
        morning_t.addParmTuple(use_irid_mat_layer)
        use_irid_mat_layer.set((0,))
        
        
        
        use_energy_emmissive = node.parmTuple("use_energy_emmissive")
        morning_t.addParmTuple(use_energy_emmissive)
        use_energy_emmissive.set((0,))
        
        use_energy = node.parmTuple("use_energy")
        morning_t.addParmTuple(use_energy)
        use_energy.set((0,))
        
        
        
        som_shader_count += 1
        

        
hou.takes.setCurrentTake(main_t)

print "Iridiscence disbaled on " + str(som_shader_count) + " SOM Shaders in 'morning' Take"
]]></script>
    <keywordList>
      <keyword>disable iridiscence som</keyword>
    </keywordList>
  </tool>
</shelfDocument>
